using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace NorthwindRepository
{
	/// <summary>
	/// Strongly-typed collection for the CustomerCustomerDemo class.
	/// </summary>
    [Serializable]
	public partial class CustomerCustomerDemoCollection : RepositoryList<CustomerCustomerDemo, CustomerCustomerDemoCollection>
	{	   
		public CustomerCustomerDemoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CustomerCustomerDemoCollection</returns>
		public CustomerCustomerDemoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CustomerCustomerDemo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CustomerCustomerDemo table.
	/// </summary>
	[Serializable]
	public partial class CustomerCustomerDemo : RepositoryRecord<CustomerCustomerDemo>, IRecordBase
	{
		#region .ctors and Default Settings
		
		public CustomerCustomerDemo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CustomerCustomerDemo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CustomerCustomerDemo", TableType.Table, DataService.GetInstance("NorthwindRepository"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"main";
				//columns
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.String;
				colvarCustomerID.MaxLength = 2147483647;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = true;
				colvarCustomerID.IsForeignKey = true;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				
					colvarCustomerID.ForeignKeyTableName = "Customers";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarCustomerTypeID = new TableSchema.TableColumn(schema);
				colvarCustomerTypeID.ColumnName = "CustomerTypeID";
				colvarCustomerTypeID.DataType = DbType.String;
				colvarCustomerTypeID.MaxLength = 2147483647;
				colvarCustomerTypeID.AutoIncrement = false;
				colvarCustomerTypeID.IsNullable = false;
				colvarCustomerTypeID.IsPrimaryKey = true;
				colvarCustomerTypeID.IsForeignKey = true;
				colvarCustomerTypeID.IsReadOnly = false;
				colvarCustomerTypeID.DefaultSetting = @"";
				
					colvarCustomerTypeID.ForeignKeyTableName = "CustomerDemographics";
				schema.Columns.Add(colvarCustomerTypeID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["NorthwindRepository"].AddSchema("CustomerCustomerDemo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public string CustomerID 
		{
			get { return GetColumnValue<string>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("CustomerTypeID")]
		[Bindable(true)]
		public string CustomerTypeID 
		{
			get { return GetColumnValue<string>(Columns.CustomerTypeID); }
			set { SetColumnValue(Columns.CustomerTypeID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (2)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerTypeIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CustomerID = @"CustomerID";
			 public static string CustomerTypeID = @"CustomerTypeID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
