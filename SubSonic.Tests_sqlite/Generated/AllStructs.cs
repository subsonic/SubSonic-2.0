using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Northwind
{
	#region Tables Struct
	public partial struct Tables
	{
		
		public static readonly string Category = @"Categories";
        
		public static readonly string CustomerCustomerDemo = @"CustomerCustomerDemo";
        
		public static readonly string CustomerDemographic = @"CustomerDemographics";
        
		public static readonly string Customer = @"Customers";
        
		public static readonly string DisposeTable = @"DisposeTable";
        
		public static readonly string Distribution = @"Distribution";
        
		public static readonly string EmployeeTerritory = @"EmployeeTerritories";
        
		public static readonly string Employee = @"Employees";
        
		public static readonly string OrderDetail = @"Order Details";
        
		public static readonly string Order = @"Orders";
        
		public static readonly string ProductCategoryMap = @"Product_Category_Map";
        
		public static readonly string Product = @"Products";
        
		public static readonly string Region = @"Region";
        
		public static readonly string ShipStatus = @"ShipStatus";
        
		public static readonly string Shipper = @"Shippers";
        
		public static readonly string Supplier = @"Suppliers";
        
		public static readonly string Territory = @"Territories";
        
		public static readonly string TextEntry = @"TextEntry";
        
	}
	#endregion
    #region Schemas
    public partial class Schemas {
		
		public static TableSchema.Table Category
		{
            get { return DataService.GetSchema("Categories", "Northwind"); }
		}
        
		public static TableSchema.Table CustomerCustomerDemo
		{
            get { return DataService.GetSchema("CustomerCustomerDemo", "Northwind"); }
		}
        
		public static TableSchema.Table CustomerDemographic
		{
            get { return DataService.GetSchema("CustomerDemographics", "Northwind"); }
		}
        
		public static TableSchema.Table Customer
		{
            get { return DataService.GetSchema("Customers", "Northwind"); }
		}
        
		public static TableSchema.Table DisposeTable
		{
            get { return DataService.GetSchema("DisposeTable", "Northwind"); }
		}
        
		public static TableSchema.Table Distribution
		{
            get { return DataService.GetSchema("Distribution", "Northwind"); }
		}
        
		public static TableSchema.Table EmployeeTerritory
		{
            get { return DataService.GetSchema("EmployeeTerritories", "Northwind"); }
		}
        
		public static TableSchema.Table Employee
		{
            get { return DataService.GetSchema("Employees", "Northwind"); }
		}
        
		public static TableSchema.Table OrderDetail
		{
            get { return DataService.GetSchema("Order Details", "Northwind"); }
		}
        
		public static TableSchema.Table Order
		{
            get { return DataService.GetSchema("Orders", "Northwind"); }
		}
        
		public static TableSchema.Table ProductCategoryMap
		{
            get { return DataService.GetSchema("Product_Category_Map", "Northwind"); }
		}
        
		public static TableSchema.Table Product
		{
            get { return DataService.GetSchema("Products", "Northwind"); }
		}
        
		public static TableSchema.Table Region
		{
            get { return DataService.GetSchema("Region", "Northwind"); }
		}
        
		public static TableSchema.Table ShipStatus
		{
            get { return DataService.GetSchema("ShipStatus", "Northwind"); }
		}
        
		public static TableSchema.Table Shipper
		{
            get { return DataService.GetSchema("Shippers", "Northwind"); }
		}
        
		public static TableSchema.Table Supplier
		{
            get { return DataService.GetSchema("Suppliers", "Northwind"); }
		}
        
		public static TableSchema.Table Territory
		{
            get { return DataService.GetSchema("Territories", "Northwind"); }
		}
        
		public static TableSchema.Table TextEntry
		{
            get { return DataService.GetSchema("TextEntry", "Northwind"); }
		}
        
	
    }
    #endregion
    #region View Struct
    public partial struct Views 
    {
		
		public static readonly string AlphabeticalListOfProduct = @"Alphabetical list of products";
        
		public static readonly string CurrentProductList = @"Current Product List";
        
		public static readonly string CustomerAndSuppliersByCity = @"Customer and Suppliers by City";
        
		public static readonly string OrdersQry = @"Orders Qry";
        
		public static readonly string ProductsAboveAveragePrice = @"Products Above Average Price";
        
		public static readonly string ProductsByCategory = @"Products by Category";
        
    }
    #endregion
    
    #region Query Factories
	public static partial class DB
	{
        public static DataProvider _provider = DataService.Providers["Northwind"];
        static ISubSonicRepository _repository;
        public static ISubSonicRepository Repository 
        {
            get 
            {
                if (_repository == null)
                    return new SubSonicRepository(_provider);
                return _repository; 
            }
            set { _repository = value; }
        }
        public static Select SelectAllColumnsFrom<T>() where T : RecordBase<T>, new()
	    {
            return Repository.SelectAllColumnsFrom<T>();
	    }
	    public static Select Select()
	    {
            return Repository.Select();
	    }
	    
		public static Select Select(params string[] columns)
		{
            return Repository.Select(columns);
        }
	    
		public static Select Select(params Aggregate[] aggregates)
		{
            return Repository.Select(aggregates);
        }
   
	    public static Update Update<T>() where T : RecordBase<T>, new()
	    {
            return Repository.Update<T>();
	    }
	    
	    public static Insert Insert()
	    {
            return Repository.Insert();
	    }
	    
	    public static Delete Delete()
	    {
            return Repository.Delete();
	    }
	    
	    public static InlineQuery Query()
	    {
            return Repository.Query();
	    }
	    	    
	    
	}
    #endregion
    
}
// <auto-generated />
namespace NorthwindRepository
{
	#region Tables Struct
	public partial struct Tables
	{
		
		public static readonly string Category = @"Categories";
        
		public static readonly string CustomerCustomerDemo = @"CustomerCustomerDemo";
        
		public static readonly string CustomerDemographic = @"CustomerDemographics";
        
		public static readonly string Customer = @"Customers";
        
		public static readonly string DisposeTable = @"DisposeTable";
        
		public static readonly string Distribution = @"Distribution";
        
		public static readonly string EmployeeTerritory = @"EmployeeTerritories";
        
		public static readonly string Employee = @"Employees";
        
		public static readonly string OrderDetail = @"Order Details";
        
		public static readonly string Order = @"Orders";
        
		public static readonly string ProductCategoryMap = @"Product_Category_Map";
        
		public static readonly string Product = @"Products";
        
		public static readonly string Region = @"Region";
        
		public static readonly string ShipStatus = @"ShipStatus";
        
		public static readonly string Shipper = @"Shippers";
        
		public static readonly string Supplier = @"Suppliers";
        
		public static readonly string Territory = @"Territories";
        
		public static readonly string TextEntry = @"TextEntry";
        
	}
	#endregion
    #region Schemas
    public partial class Schemas {
		
		public static TableSchema.Table Category
		{
            get { return DataService.GetSchema("Categories", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table CustomerCustomerDemo
		{
            get { return DataService.GetSchema("CustomerCustomerDemo", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table CustomerDemographic
		{
            get { return DataService.GetSchema("CustomerDemographics", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Customer
		{
            get { return DataService.GetSchema("Customers", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table DisposeTable
		{
            get { return DataService.GetSchema("DisposeTable", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Distribution
		{
            get { return DataService.GetSchema("Distribution", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table EmployeeTerritory
		{
            get { return DataService.GetSchema("EmployeeTerritories", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Employee
		{
            get { return DataService.GetSchema("Employees", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table OrderDetail
		{
            get { return DataService.GetSchema("Order Details", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Order
		{
            get { return DataService.GetSchema("Orders", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table ProductCategoryMap
		{
            get { return DataService.GetSchema("Product_Category_Map", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Product
		{
            get { return DataService.GetSchema("Products", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Region
		{
            get { return DataService.GetSchema("Region", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table ShipStatus
		{
            get { return DataService.GetSchema("ShipStatus", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Shipper
		{
            get { return DataService.GetSchema("Shippers", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Supplier
		{
            get { return DataService.GetSchema("Suppliers", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table Territory
		{
            get { return DataService.GetSchema("Territories", "NorthwindRepository"); }
		}
        
		public static TableSchema.Table TextEntry
		{
            get { return DataService.GetSchema("TextEntry", "NorthwindRepository"); }
		}
        
	
    }
    #endregion
    #region View Struct
    public partial struct Views 
    {
		
		public static readonly string AlphabeticalListOfProduct = @"Alphabetical list of products";
        
		public static readonly string CurrentProductList = @"Current Product List";
        
		public static readonly string CustomerAndSuppliersByCity = @"Customer and Suppliers by City";
        
		public static readonly string OrdersQry = @"Orders Qry";
        
		public static readonly string ProductsAboveAveragePrice = @"Products Above Average Price";
        
		public static readonly string ProductsByCategory = @"Products by Category";
        
    }
    #endregion
    
    #region Query Factories
	public static partial class DB
	{
        public static DataProvider _provider = DataService.Providers["NorthwindRepository"];
        static ISubSonicRepository _repository;
        public static ISubSonicRepository Repository 
        {
            get 
            {
                if (_repository == null)
                    return new SubSonicRepository(_provider);
                return _repository; 
            }
            set { _repository = value; }
        }
        public static Select SelectAllColumnsFrom<T>() where T : RecordBase<T>, new()
	    {
            return Repository.SelectAllColumnsFrom<T>();
	    }
	    public static Select Select()
	    {
            return Repository.Select();
	    }
	    
		public static Select Select(params string[] columns)
		{
            return Repository.Select(columns);
        }
	    
		public static Select Select(params Aggregate[] aggregates)
		{
            return Repository.Select(aggregates);
        }
   
	    public static Update Update<T>() where T : RecordBase<T>, new()
	    {
            return Repository.Update<T>();
	    }
	    
	    public static Insert Insert()
	    {
            return Repository.Insert();
	    }
	    
	    public static Delete Delete()
	    {
            return Repository.Delete();
	    }
	    
	    public static InlineQuery Query()
	    {
            return Repository.Query();
	    }
	    	    
	    
	    #region Repository Compliance
	    
        public static T Get<T>(object primaryKeyValue) where T : RepositoryRecord<T>, new() 
        {
            return Repository.Get<T>(primaryKeyValue);
        }
        public static T Get<T>(string columnName, object columnValue) where T : RepositoryRecord<T>, new()
        {
            return Repository.Get<T>(columnName,columnValue);
        }
        
        public static void Delete<T>(string columnName, object columnValue) where T : RepositoryRecord<T>, new() 
        {
            Repository.Delete<T>(columnName, columnValue);            
        }
        public static void Delete<T>(RepositoryRecord<T> item) where T : RepositoryRecord<T>, new() 
        {
            Repository.Delete<T>(item);
        }
        public static void DeleteByKey<T>(object itemId) where T : RepositoryRecord<T>, new() 
        {
            Repository.DeleteByKey<T>(itemId);
        }
        public static void Destroy<T>(RepositoryRecord<T> item) where T : RepositoryRecord<T>, new() 
        {
            Repository.Destroy<T>(item);
        }
        
        public static void Destroy<T>(string columnName, object value) where T : RepositoryRecord<T>, new() 
        {
            Repository.Destroy<T>(columnName,value);
        }
        public static void DestroyByKey<T>(object itemId) where T : RepositoryRecord<T>, new() 
        {
            Repository.DestroyByKey<T>(itemId);
        }
        public static int Save<T>(RepositoryRecord<T> item) where T : RepositoryRecord<T>, new() 
        {
            return Repository.Save<T>(item);
        }
        
        public static int Save<T>(RepositoryRecord<T> item, string userName) where T : RepositoryRecord<T>, new()
        {
            return Repository.Save<T>(item,userName);
        }
        public static int SaveAll<ItemType, ListType>(RepositoryList<ItemType, ListType> itemList)
          where ItemType : RepositoryRecord<ItemType>, new()
          where ListType : RepositoryList<ItemType, ListType>, new()
        {
            return Repository.SaveAll<ItemType, ListType>(itemList);
        }
 
        public static int SaveAll<ItemType, ListType>(RepositoryList<ItemType, ListType> itemList, string userName)
          where ItemType : RepositoryRecord<ItemType>, new()
          where ListType : RepositoryList<ItemType, ListType>, new()
        {
            return Repository.SaveAll<ItemType, ListType>(itemList, userName);
        }
        public static int Update<T>(RepositoryRecord<T> item) where T : RepositoryRecord<T>, new() 
        {
            return Repository.Update<T>(item, "");
        }
        public static int Update<T>(RepositoryRecord<T> item, string userName) where T : RepositoryRecord<T>, new() 
        {
            return Repository.Update<T>(item, userName);
        }
        public static int Insert<T>(RepositoryRecord<T> item) where T : RepositoryRecord<T>, new() 
        {
            return Repository.Insert<T>(item);
        }
        public static int Insert<T>(RepositoryRecord<T> item, string userName) where T : RepositoryRecord<T>, new() 
        {
            return Repository.Insert<T>(item,userName);
        }
	    #endregion
        
	}
    #endregion
    
}
#region Databases
public partial struct Databases 
{
	
	public static readonly string Northwind = @"Northwind";
    
	public static readonly string NorthwindRepository = @"NorthwindRepository";
    
}
#endregion